var search_data = {"index":{"searchIndex":["object","tweet","tweetmodel","twitterclone","user","usermodel","==()","follow_user()","get_tweets_for_tag()","get_tweets_for_user()","get_user_by_handle()","new()","new()","new()","new()","save_tweet()","save_user()","tweet()","unfollow_user()","unknown()","unknown()","user_exists?()"],"longSearchIndex":["object","tweet","tweetmodel","twitterclone","user","usermodel","tweet#==()","user#follow_user()","tweetmodel#get_tweets_for_tag()","tweetmodel#get_tweets_for_user()","usermodel#get_user_by_handle()","tweet::new()","tweetmodel::new()","user::new()","usermodel::new()","tweetmodel#save_tweet()","usermodel#save_user()","user#tweet()","user#unfollow_user()","object#unknown()","twitterclone#unknown()","usermodel#user_exists?()"],"info":[["Object","","Object.html","",""],["Tweet","","Tweet.html","","<p>Class representing a Tweet from a user.\n"],["TweetModel","","TweetModel.html","","<p>Model class for saving and loading tweets to a mongo database.\n"],["TwitterClone","","TwitterClone.html","","<p>Main application class for sinatra application.\n"],["User","","User.html","","<p>Class representing an individual user.\n"],["UserModel","","UserModel.html","","<p>Class for storing and retrieving User objects from a mongo database.\n"],["==","Tweet","Tweet.html#method-i-3D-3D","(other)","<p>Overloads the == method for the Tweet class. Equality is determined by the\nsameness of the user and the …\n"],["follow_user","User","User.html#method-i-follow_user","(user)","<p>Follow a users tweets.\n<p>ARGS:\n<p>user should be a user object to follow.\n"],["get_tweets_for_tag","TweetModel","TweetModel.html#method-i-get_tweets_for_tag","(tag, limit = 50)","<p>Returns a collection of tweets which have the specified tag as an array.\nThe tweets are stored in the …\n"],["get_tweets_for_user","TweetModel","TweetModel.html#method-i-get_tweets_for_user","(user, limit = 50)","<p>Returns a collection of tweets created by a given user as an array. The\ntweets are stored in the array …\n"],["get_user_by_handle","UserModel","UserModel.html#method-i-get_user_by_handle","(handle)","<p>Queries database for a user with the specified handle, if user exists then\nan object is generated with …\n"],["new","Tweet","Tweet.html#method-c-new","(text, user, timestamp = nil, tags = nil)","<p>Creates a new tweet object.\n<p>ARGS:\n<p>text sould be a string of the tweet’s text.\n"],["new","TweetModel","TweetModel.html#method-c-new","(connection, collection_name)","<p>Creates a new TweetModel object.\n<p>ARGS:\n<p>connection should be a Mongo database connection.\n"],["new","User","User.html#method-c-new","(handle, following = nil)","<p>Creates a new User object.\n<p>ARGS:\n<p>handle should be a string representing the user’s handle.\n"],["new","UserModel","UserModel.html#method-c-new","(connection, collection_name)","<p>Create a new user model.\n<p>ARGS:\n<p>connection should be a Mongo database connection.\n"],["save_tweet","TweetModel","TweetModel.html#method-i-save_tweet","(tweet)","<p>Saves a Tweet object to the database.\n<p>ARGS:\n<p>tweet should be a tweet object to be saved.\n"],["save_user","UserModel","UserModel.html#method-i-save_user","(user)","<p>Save a user object to a mongo database.\n<p>If a user does not exist in the database they are added, if they …\n"],["tweet","User","User.html#method-i-tweet","(text, model)","<p>Issue a tweet for the user. Creates and returns a Tweet object and also\nsaves the tweet using the provided …\n"],["unfollow_user","User","User.html#method-i-unfollow_user","(user)","<p>Unfollow a users tweets.\n<p>ARGS:\n<p>user should be a user object to unfollow.\n"],["unknown","Object","Object.html#method-i-unknown","","<p>Main routing table for application.\n"],["unknown","TwitterClone","TwitterClone.html#method-i-unknown","","<p>App configuration\n<p>Enables sessions\n<p>Creates database connection and uses that to create models\n"],["user_exists?","UserModel","UserModel.html#method-i-user_exists-3F","(handle)","<p>Searches for a user handle in the database, uses a regex which ignores the\ncase of the handle. Returns …\n"]]}}